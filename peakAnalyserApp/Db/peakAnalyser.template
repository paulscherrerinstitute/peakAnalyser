#=================================================================#
# Database for the records specific to scienta analysers via PEAK API

include "ADBase.template"

########## Disable Redundant areaDetector Fields #########
record(ao, "$(P)$(R)AcquireTime")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)NumExposures")
{
    field(DRVL, "1")
}

record(longout, "$(P)$(R)NumImages")
{
    field(DRVL, "1")
}

record(longout, "$(P)$(R)MinX")
{
  field(PINI, "NO")
}

record(longout, "$(P)$(R)MinY")
{
  field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeX")
{
  field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeY")
{
  field(PINI, "NO")
}

record(longout, "$(P)$(R)BinX")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinY")
{
  field(DISA, "1")
}

record(ao, "$(P)$(R)Gain")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseX")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseY")
{
  field(DISA, "1")
}

######################## Progress Information ###########################

# Estimated time of acquisition
record(ai, "$(P)$(R)ETA")
{
  field(DESC, "Estimated Time of Acquistion")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACQ_ETA")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(EGU,  "s")
}

# ETA in hh:mm:ss format
record(stringin, "$(P)$(R)ETA_STR")
{
  field(DESC, "Estimated Time of Acquistion")
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACQ_ETA_STR")
  field(VAL,  "N/A")
  field(SCAN, "I/O Intr")
}

# Number of steps to acquire
record(longin, "$(P)$(R)STEPS_RBV")
{
  field(DESC, "Number of steps")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NSTEPS")
  field(SCAN, "I/O Intr")
}

# Number of steps acquired
record(longin, "$(P)$(R)STEPS_COUNTER_RBV")
{
  field(DESC, "Number of steps acquired")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NSTEPS_COUNTER")
  field(SCAN, "I/O Intr")
}

######################## Modes ###########################

# Currently selected element set
record(mbbi, "$(P)$(R)ELEMENT_SET_RBV")
{
  field(DESC, "Element Set Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ELEMENT_SETS")
  field(SCAN, "I/O Intr")
}

# Selecr data acquisition mode
record(mbbo, "$(P)$(R)ACQ_MODE")
{
  field(DESC, "Acquisition Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACQUISITION_MODE")
  field(ZRST, "Fixed")
  field(ZRVL, "0")
  field(ONST, "Sweep Energy")
  field(ONVL, "1")
  field(TWST, "Sweep ThetaY")
  field(TWVL, "2")
  field(THST, "Sweep Energy & ThetaY")
  field(THVL, "3")
}

record(mbbi, "$(P)$(R)ACQ_MODE_RBV")
{
  field(DESC, "Acquisition Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACQUISITION_MODE")
  field(SCAN, "I/O Intr")
  field(ZRST, "Fixed")
  field(ZRVL, "0")
  field(ONST, "Sweep Energy")
  field(ONVL, "1")
  field(TWST, "Sweep ThetaY")
  field(TWVL, "2")
  field(THST, "Sweep Energy & ThetaY")
  field(THVL, "3")
}

# Select energy mode
record(mbbo, "$(P)$(R)ENERGY_MODE")
{
  field(DESC, "Energy Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENERGY_MODE")
  field(ZRST, "Kinetic")
  field(ZRVL, "0")
  field(ONST, "Binding")
  field(ONVL, "1")
  field(PINI, "YES")
}

record(mbbi, "$(P)$(R)ENERGY_MODE_RBV")
{
  field(DESC, "Energy Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENERGY_MODE")
  field(SCAN, "I/O Intr")
  field(ZRST, "Kinetic")
  field(ZRVL, "0")
  field(ONST, "Binding")
  field(ONVL, "1")
}

# Lens mode
record(mbbo, "$(P)$(R)LENS_MODE")
{
  field(DESC, "Lens Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LENS_MODES")
#  field(PINI, "YES")
}

record(mbbi, "$(P)$(R)LENS_MODE_RBV")
{
  field(DESC, "Lens Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LENS_MODES")
  field(SCAN, "I/O Intr")
}

# Detector mode
record(mbbo, "$(P)$(R)DETECTOR_MODE")
{
  field(DESC, "Detector Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_MODE")
#  field(PINI, "YES")
}

record(mbbi, "$(P)$(R)DETECTOR_MODE_RBV")
{
  field(DESC, "Dectector Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_MODE")
  field(SCAN, "I/O Intr")
}

# Select pass energy
record(mbbo, "$(P)$(R)PASS_ENERGY")
{
  field(DESC, "Pass Energy")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))PASS_ENERGY")
#  field(PINI, "YES")
}

# Report back current pass energy
record(mbbi, "$(P)$(R)PASS_ENERGY_RBV")
{
  field(DESC, "Pass Energy Readback")
  field(DTYP, "asynInt32")
  field(SCAN, "I/O Intr")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))PASS_ENERGY")
}

# Excitation energy
record(ao, "$(P)$(R)EXCITATION_ENERGY")
{
  field(DESC, "Excitation Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EXCITATION_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
}

record(ai, "$(P)$(R)EXCITATION_ENERGY_RBV")
{
  field(DESC, "Excitation Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EXCITATION_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# Work function
record(ao, "$(P)$(R)WORK_FUNCTION")
{
  field(DESC, "Work Function")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WORK_FUNCTION")
  field(PREC, "1")
  field(VAL,  "5")
  field(PINI, "YES")
}

record(ai, "$(P)$(R)WORK_FUNCTION_RBV")
{
  field(DESC, "Work Function Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WORK_FUNCTION")
  field(SCAN, "I/O Intr")
  field(PREC, "1")
}

###################### Energy (eV) ########################

# Low energy value
record(ao, "$(P)$(R)LOW_ENERGY")
{
  field(DESC, "Low Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LOW_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "82")
}

record(ai, "$(P)$(R)LOW_ENERGY_RBV")
{
  field(DESC, "Low Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LOW_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)ENERGY_WIDTH_RBV")
}

# Centre energy
record(ao, "$(P)$(R)CENTRE_ENERGY")
{
  field(DESC, "Centre Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "84")
}

record(ai, "$(P)$(R)CENTRE_ENERGY_RBV")
{
  field(DESC, "Centre Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# High energy
record(ao, "$(P)$(R)HIGH_ENERGY")
{
  field(DESC, "High Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HIGH_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "86")
}

record(ai, "$(P)$(R)HIGH_ENERGY_RBV")
{
  field(DESC, "High Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HIGH_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)ENERGY_WIDTH_RBV")
}

# Calculate the energy width from the
# the high and low energy values
record(calc, "$(P)$(R)ENERGY_WIDTH_RBV")
{
  field(DESC, "Calculated energy width")
  field(SCAN, "Passive")
  field(CALC, "ABS(B-A)")
  field(INPA, "$(P)$(R)LOW_ENERGY_RBV")
  field(INPB, "$(P)$(R)HIGH_ENERGY_RBV")
  field(PREC, "3")
}

###################### Slices ########################

record(ai, "$(P)$(R)LOW_SLICE_RBV")
{
  field(DESC, "Low Slice Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LOW_SLICE")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)SLICE_WIDTH_RBV")
}

# Centre slice
record(ao, "$(P)$(R)CENTRE_SLICE")
{
  field(DESC, "Centre Slice")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_SLICE")
  field(PREC, "3")
#  field(PINI, "YES")
  field(VAL,  "0")
}

record(ai, "$(P)$(R)CENTRE_SLICE_RBV")
{
  field(DESC, "Centre Slice Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_SLICE")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

record(ai, "$(P)$(R)HIGH_SLICE_RBV")
{
  field(DESC, "High Slice Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HIGH_SLICE")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)SLICE_WIDTH_RBV")
}

# Calculate the slice width from the
# the high and low slice values
record(calc, "$(P)$(R)SLICE_WIDTH_RBV")
{
  field(DESC, "Calculated slice width")
  field(SCAN, "Passive")
  field(CALC, "ABS(B-A)")
  field(INPA, "$(P)$(R)LOW_SLICE_RBV")
  field(INPB, "$(P)$(R)HIGH_SLICE_RBV")
  field(PREC, "3")
}

###################### Theta Y (degree) ########################

# Low Theta Y value
record(ao, "$(P)$(R)LOW_THETA_Y")
{
  field(DESC, "Low Theta Y")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LOW_ANGLE_Y")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "-10")
}

record(ai, "$(P)$(R)LOW_THETA_Y_RBV")
{
  field(DESC, "Low Theta Y Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LOW_ANGLE_Y")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)THETA_Y_WIDTH_RBV")
}

# Centre Theta Y value
record(ao, "$(P)$(R)CENTRE_THETA_Y")
{
  field(DESC, "Centre Theta Y")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_ANGLE_Y")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "0")
}

record(ai, "$(P)$(R)CENTRE_THETA_Y_RBV")
{
  field(DESC, "Centre Theta Y Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTER_ANGLE_Y")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# High Theta Y value
record(ao, "$(P)$(R)HIGH_THETA_Y")
{
  field(DESC, "High Theta Y")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HIGH_ANGLE_Y")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "10")
}

record(ai, "$(P)$(R)HIGH_THETA_Y_RBV")
{
  field(DESC, "High Theta Y Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HIGH_ANGLE_Y")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)THETA_Y_WIDTH_RBV")
}

# Calculate the Theta Y width from the
# the high and low angle values
record(calc, "$(P)$(R)THETA_Y_WIDTH_RBV")
{
  field(DESC, "Calculated Theta Y width")
  field(SCAN, "Passive")
  field(CALC, "ABS(B-A)")
  field(INPA, "$(P)$(R)LOW_THETA_Y_RBV")
  field(INPB, "$(P)$(R)HIGH_THETA_Y_RBV")
  field(PREC, "3")
}

###################### Step ########################

# Energy step size
record(ao, "$(P)$(R)STEP_SIZE")
{
  field(DESC, "Energy Step Size")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENERGY_STEP")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "0.2")
}

record(ai, "$(P)$(R)STEP_SIZE_RBV")
{
  field(DESC, "Energy Step Size Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENERGY_STEP")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# Slice step size
record(ai, "$(P)$(R)SLICE_STEP_SIZE_RBV")
{
  field(DESC, "ThetaX Step Size Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SLICE_STEP")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# Theta Y step size
record(ao, "$(P)$(R)THETA_Y_STEP_SIZE")
{
  field(DESC, "ThetaY Step Size")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ANGLE_Y_STEP")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "1")
}

record(ai, "$(P)$(R)THETA_Y_STEP_SIZE_RBV")
{
  field(DESC, "ThetaY Step Size Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ANGLE_Y_STEP")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

###################### Count ########################

# Energy count
record(longin, "$(P)$(R)COUNT_RBV")
{
  field(DESC, "Energy Count Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENERGY_COUNT")
  field(SCAN, "I/O Intr")
}

# Slice count
record(longin, "$(P)$(R)SLICE_COUNT_RBV")
{
  field(DESC, "Slice Count Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SLICE_COUNT")
  field(SCAN, "I/O Intr")
}

# Theta Y count
record(longin, "$(P)$(R)THETA_Y_COUNT_RBV")
{
  field(DESC, "ThetaY Count Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ANGLE_Y_COUNT")
  field(SCAN, "I/O Intr")
}

################## Detector Bin ####################

# User enters desired number of channels
record(longout, "$(P)$(R)CHANNELS")
{
  field(DESC, "Number of channels")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_CHANNELS")
  field(PINI, "YES")
}

record(longin, "$(P)$(R)CHANNELS_RBV")
{
  field(DESC, "Number of channels Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_CHANNELS")
  field(SCAN, "I/O Intr")
}

# User enters desired number of slices
record(longout, "$(P)$(R)SLICES")
{
  field(DESC, "Number of slices")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_SLICES")
  field(PINI, "YES")
}

record(longin, "$(P)$(R)SLICES_RBV")
{
  field(DESC, "Number of slices Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DETECTOR_SLICES")
  field(SCAN, "I/O Intr")
}

# Reset power supplies to zero
record(longout, "$(P)$(R)ZERO_SUPPLIES")
{
  field(DESC, "Zero the power supplies")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ZERO_SUPPLIES")
  field(DRVL, "0")
  field(DRVH, "1")
}
